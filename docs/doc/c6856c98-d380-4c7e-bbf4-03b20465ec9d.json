{
    "summary": "Whisper is a versatile speech recognition model that uses Transformer models and multitask training for diverse languages, offering installation setup instructions and providing information on available model sizes. The library's performance in audio transcription and translation across various languages can be demonstrated using Python integration for audio processing, model detection, language identification, and text decoding.",
    "details": [
        {
            "comment": "This code is a brief introduction to Whisper, a general-purpose speech recognition model. It mentions that it's trained on diverse audio and can perform multilingual tasks like speech recognition, translation, language identification, and voice activity detection. The approach uses Transformer sequence-to-sequence models.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":0-14",
            "content": "# Whisper\n[[Blog]](https://openai.com/blog/whisper)\n[[Paper]](https://arxiv.org/abs/2212.04356)\n[[Model card]](https://github.com/openai/whisper/blob/main/model-card.md)\n[[Colab example]](https://colab.research.google.com/github/openai/whisper/blob/master/notebooks/LibriSpeech.ipynb)\nWhisper is a general-purpose speech recognition model. It is trained on a large dataset of diverse audio and is also a multitasking model that can perform multilingual speech recognition, speech translation, and language identification.\n## Approach\n![Approach](https://raw.githubusercontent.com/openai/whisper/main/approach.png)\nA Transformer sequence-to-sequence model is trained on various speech processing tasks, including multilingual speech recognition, speech translation, spoken language identification, and voice activity detection. These tasks are jointly represented as a sequence of tokens to be predicted by the decoder, allowing a single model to replace many stages of a traditional speech-processing pipelin"
        },
        {
            "comment": "Explains the multitask training format using task specifiers or classification targets.\nDetails installation setup, including Python and PyTorch versions, package dependencies, and installation methods.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":14-31",
            "content": "e. The multitask training format uses a set of special tokens that serve as task specifiers or classification targets.\n## Setup\nWe used Python 3.9.9 and [PyTorch](https://pytorch.org/) 1.10.1 to train and test our models, but the codebase is expected to be compatible with Python 3.8-3.11 and recent PyTorch versions. The codebase also depends on a few Python packages, most notably [OpenAI's tiktoken](https://github.com/openai/tiktoken) for their fast tokenizer implementation. You can download and install (or update to) the latest release of Whisper with the following command:\n    pip install -U openai-whisper\nAlternatively, the following command will pull and install the latest commit from this repository, along with its Python dependencies:\n    pip install git+https://github.com/openai/whisper.git \nTo update the package to the latest version of this repository, please run:\n    pip install --upgrade --no-deps --force-reinstall git+https://github.com/openai/whisper.git\nIt also requires the comma"
        },
        {
            "comment": "Installing FFmpeg using various package managers.\nRust installation instructions in case Tiktoken doesn't provide a wheel for your platform.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":31-50",
            "content": "nd-line tool [`ffmpeg`](https://ffmpeg.org/) to be installed on your system, which is available from most package managers:\n```bash\n# on Ubuntu or Debian\nsudo apt update && sudo apt install ffmpeg\n# on Arch Linux\nsudo pacman -S ffmpeg\n# on MacOS using Homebrew (https://brew.sh/)\nbrew install ffmpeg\n# on Windows using Chocolatey (https://chocolatey.org/)\nchoco install ffmpeg\n# on Windows using Scoop (https://scoop.sh/)\nscoop install ffmpeg\n```\nYou may need [`rust`](http://rust-lang.org) installed as well, in case [tiktoken](https://github.com/openai/tiktoken) does not provide a pre-built wheel for your platform. If you see installation errors during the `pip install` command above, please follow the [Getting started page](https://www.rust-lang.org/learn/get-started) to install Rust development environment. Additionally, you may need to configure the `PATH` environment variable, e.g. `export PATH=\"$HOME/.cargo/bin:$PATH\"`. If the installation fails with `No module named 'setuptools_rust'`, you need to install `setuptools_rust`, e.g. by running:"
        },
        {
            "comment": "This code describes the available model sizes for a certain tool, their memory requirements, and inference speed relative to the large model. It provides information on English-only models as well as multilingual models, with the actual speed varying depending on factors like hardware.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":52-67",
            "content": "```bash\npip install setuptools-rust\n```\n## Available models and languages\nThere are five model sizes, four with English-only versions, offering speed and accuracy tradeoffs. Below are the names of the available models and their approximate memory requirements and inference speed relative to the large model; actual speed may vary depending on many factors including the available hardware.\n|  Size  | Parameters | English-only model | Multilingual model | Required VRAM | Relative speed |\n|:------:|:----------:|:------------------:|:------------------:|:-------------:|:--------------:|\n|  tiny  |    39 M    |     `tiny.en`      |       `tiny`       |     ~1 GB     |      ~32x      |\n|  base  |    74 M    |     `base.en`      |       `base`       |     ~1 GB     |      ~16x      |\n| small  |   244 M    |     `small.en`     |      `small`       |     ~2 GB     |      ~6x       |\n| medium |   769 M    |    `medium.en`     |      `medium`      |     ~5 GB     |      ~2x       |\n| large  |   1550 M   |        N/A         |      `large`       |    ~10 GB     |       1x       |"
        },
        {
            "comment": "This code describes the performance of Whisper models for different languages and provides a command-line usage example to transcribe audio files using the \"medium\" model. The figure shows word error rates (WER) or character error rates (CER) evaluated on Common Voice 15 and Fleurs datasets. Additional metrics can be found in the paper linked.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":69-81",
            "content": "The `.en` models for English-only applications tend to perform better, especially for the `tiny.en` and `base.en` models. We observed that the difference becomes less significant for the `small.en` and `medium.en` models.\nWhisper's performance varies widely depending on the language. The figure below shows a performance breakdown of `large-v3` and `large-v2` models by language, using WERs (word error rates) or CER (character error rates, shown in *Italic*) evaluated on the Common Voice 15 and Fleurs datasets. Additional WER/CER metrics corresponding to the other models and datasets can be found in Appendix D.1, D.2, and D.4 of [the paper](https://arxiv.org/abs/2212.04356), as well as the BLEU (Bilingual Evaluation Understudy) scores for translation in Appendix D.3.\n![WER breakdown by language](https://github.com/openai/whisper/assets/266841/f4619d66-1058-4005-8f67-a9d811b77c62)\n## Command-line usage\nThe following command will transcribe speech in audio files, using the `medium` model:\n    whisper audio.flac audio.mp3 audio.wav --model medium"
        },
        {
            "comment": "Code performs audio transcription and translation using the Whisper library.\n\n- Specify language using `--language` option for non-English speech.\n- Use `--task translate` to translate speech into English.\n- View available options with `whisper --help`.\n- Perform transcription within Python using `load_model`, `transcribe`, and `result[\"text\"]`.\n- Internally, `transcribe()` method processes audio with sliding 30-second windows.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":83-112",
            "content": "The default setting (which selects the `small` model) works well for transcribing English. To transcribe an audio file containing non-English speech, you can specify the language using the `--language` option:\n    whisper japanese.wav --language Japanese\nAdding `--task translate` will translate the speech into English:\n    whisper japanese.wav --language Japanese --task translate\nRun the following to view all available options:\n    whisper --help\nSee [tokenizer.py](https://github.com/openai/whisper/blob/main/whisper/tokenizer.py) for the list of all available languages.\n## Python usage\nTranscription can also be performed within Python: \n```python\nimport whisper\nmodel = whisper.load_model(\"base\")\nresult = model.transcribe(\"audio.mp3\")\nprint(result[\"text\"])\n```\nInternally, the `transcribe()` method reads the entire file and processes the audio with a sliding 30-second window, performing autoregressive sequence-to-sequence predictions on each window.\nBelow is an example usage of `whisper.detect_language()` and `whisper.decode()` which provide lower-level access to the model."
        },
        {
            "comment": "This code is using the Whisper library to detect and decode spoken language from an audio file. It first loads the audio file, pads or trims it to fit within 30 seconds, then creates a log-Mel spectrogram of the audio and moves it to the device that the model is on. The code uses the Whisper model to detect the spoken language, prints out the detected language with its corresponding probability, and finally decodes the audio using the Whisper DecodingOptions to obtain the recognized text which it then prints out.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/README.md\":114-145",
            "content": "```python\nimport whisper\nmodel = whisper.load_model(\"base\")\n# load audio and pad/trim it to fit 30 seconds\naudio = whisper.load_audio(\"audio.mp3\")\naudio = whisper.pad_or_trim(audio)\n# make log-Mel spectrogram and move to the same device as the model\nmel = whisper.log_mel_spectrogram(audio).to(model.device)\n# detect the spoken language\n_, probs = model.detect_language(mel)\nprint(f\"Detected language: {max(probs, key=probs.get)}\")\n# decode the audio\noptions = whisper.DecodingOptions()\nresult = whisper.decode(model, mel, options)\n# print the recognized text\nprint(result.text)\n```\n## More examples\nPlease use the [\ud83d\ude4c Show and tell](https://github.com/openai/whisper/discussions/categories/show-and-tell) category in Discussions for sharing more example usages of Whisper and third-party extensions such as web demos, integrations with other tools, ports for different platforms, etc.\n## License\nWhisper's code and model weights are released under the MIT License. See [LICENSE](https://github.com/openai/whisper/blob/main/LICENSE) for further details."
        }
    ]
}