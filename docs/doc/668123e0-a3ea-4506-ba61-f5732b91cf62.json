{
    "summary": "The code tests the EnglishNumberNormalizer and EnglishTextNormalizer classes, verifying proper normalization of numbers, dates, percentages, abbreviations, and various input formats.",
    "details": [
        {
            "comment": "This code tests the EnglishNumberNormalizer and EnglishTextNormalizer classes in the whisper library by providing various input strings and asserting that the normalization output is as expected.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/tests/test_normalizer.py\":0-29",
            "content": "import pytest\nfrom whisper.normalizers import EnglishTextNormalizer\nfrom whisper.normalizers.english import (\n    EnglishNumberNormalizer,\n    EnglishSpellingNormalizer,\n)\n@pytest.mark.parametrize(\"std\", [EnglishNumberNormalizer(), EnglishTextNormalizer()])\ndef test_number_normalizer(std):\n    assert std(\"two\") == \"2\"\n    assert std(\"thirty one\") == \"31\"\n    assert std(\"five twenty four\") == \"524\"\n    assert std(\"nineteen ninety nine\") == \"1999\"\n    assert std(\"twenty nineteen\") == \"2019\"\n    assert std(\"two point five million\") == \"2500000\"\n    assert std(\"four point two billions\") == \"4200000000s\"\n    assert std(\"200 thousand\") == \"200000\"\n    assert std(\"200 thousand dollars\") == \"$200000\"\n    assert std(\"$20 million\") == \"$20000000\"\n    assert std(\"\u20ac52.4 million\") == \"\u20ac52400000\"\n    assert std(\"\u00a377 thousands\") == \"\u00a377000s\"\n    assert std(\"two double o eight\") == \"2008\"\n    assert std(\"three thousand twenty nine\") == \"3029\"\n    assert std(\"forty three thousand two hundred sixty\") == \"43260\"\n    assert std(\"forty three thousand two hundred and sixty\") == \"43260\""
        },
        {
            "comment": "These tests assert that the normalizer function correctly handles various input formats for numbers, dates, percentages, and abbreviations.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/tests/test_normalizer.py\":31-56",
            "content": "    assert std(\"nineteen fifties\") == \"1950s\"\n    assert std(\"thirty first\") == \"31st\"\n    assert std(\"thirty three thousand and three hundred and thirty third\") == \"33333rd\"\n    assert std(\"three billion\") == \"3000000000\"\n    assert std(\"millions\") == \"1000000s\"\n    assert std(\"july third twenty twenty\") == \"july 3rd 2020\"\n    assert std(\"august twenty sixth twenty twenty one\") == \"august 26th 2021\"\n    assert std(\"3 14\") == \"3 14\"\n    assert std(\"3.14\") == \"3.14\"\n    assert std(\"3 point 2\") == \"3.2\"\n    assert std(\"3 point 14\") == \"3.14\"\n    assert std(\"fourteen point 4\") == \"14.4\"\n    assert std(\"two point two five dollars\") == \"$2.25\"\n    assert std(\"two hundred million dollars\") == \"$200000000\"\n    assert std(\"$20.1 million\") == \"$20100000\"\n    assert std(\"ninety percent\") == \"90%\"\n    assert std(\"seventy six per cent\") == \"76%\"\n    assert std(\"double oh seven\") == \"007\"\n    assert std(\"double zero seven\") == \"007\"\n    assert std(\"nine one one\") == \"911\"\n    assert std(\"nine double one\") == \"911\"\n    assert std(\"one triple oh one\") == \"10001\""
        },
        {
            "comment": "This code is testing the functionality of a spelling normalizer and text normalizer for English language. The test cases assert that the normalizers correctly handle different input formats, such as numbers with units (thousandth, dollars), currency symbols, and text phrases (mobilization, cancelation).",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/tests/test_normalizer.py\":58-89",
            "content": "    assert std(\"two thousandth\") == \"2000th\"\n    assert std(\"thirty two thousandth\") == \"32000th\"\n    assert std(\"minus 500\") == \"-500\"\n    assert std(\"positive twenty thousand\") == \"+20000\"\n    assert std(\"two dollars and seventy cents\") == \"$2.70\"\n    assert std(\"3 cents\") == \"\u00a23\"\n    assert std(\"$0.36\") == \"\u00a236\"\n    assert std(\"three euros and sixty five cents\") == \"\u20ac3.65\"\n    assert std(\"three and a half million\") == \"3500000\"\n    assert std(\"forty eight and a half dollars\") == \"$48.5\"\n    assert std(\"b747\") == \"b 747\"\n    assert std(\"10 th\") == \"10th\"\n    assert std(\"10th\") == \"10th\"\ndef test_spelling_normalizer():\n    std = EnglishSpellingNormalizer()\n    assert std(\"mobilisation\") == \"mobilization\"\n    assert std(\"cancelation\") == \"cancellation\"\ndef test_text_normalizer():\n    std = EnglishTextNormalizer()\n    assert std(\"Let's\") == \"let us\"\n    assert std(\"he's like\") == \"he is like\"\n    assert std(\"she's been like\") == \"she has been like\"\n    assert std(\"10km\") == \"10 km\"\n    assert std(\"10mm\") == \"10 mm\""
        },
        {
            "comment": "Checking if normalization function works correctly on given inputs.",
            "location": "\"/media/root/Toshiba XG3/works/whisper/docs/src/tests/test_normalizer.py\":90-95",
            "content": "    assert std(\"RC232\") == \"rc 232\"\n    assert (\n        std(\"Mr. Park visited Assoc. Prof. Kim Jr.\")\n        == \"mister park visited associate professor kim junior\"\n    )"
        }
    ]
}